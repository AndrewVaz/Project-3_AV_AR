// Cite: https://create.arduino.cc/projecthub/ammaratef45/detecting-obstacles-and-warning-arduino-and-ultrasonic-13e5ea

#include "pitches.h"

// notes in the melody:
//int melody[] = {
//  NOTE_F1, NOTE_A1, NOTE_C1, NOTE_A1, NOTE_F1};

//  int melody[] = {
//  NOTE_B1, NOTE_E6, NOTE_GS6, NOTE_F7, NOTE_DS8};

  int melody[] = {
  NOTE_E3, NOTE_E3, NOTE_E3, NOTE_E3, NOTE_E3};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
//int noteDurations[] = {
//  4, 8, 8, 4, 4, 4, 4, 4
//};

int noteDurations[] = {
  1, 3, 1, 8, 1, 3, 1, 8
};

// Define pins for ultrasonic and buzzerint 
int const echoPin = 10;
int const trigPin = 9;
int const buzzPin = 2;

void setup()
{
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT); // trig pin will have pulses output
  pinMode(echoPin, INPUT); // echo pin should be input to get pulse width
  pinMode(buzzPin, OUTPUT); // buzz pin is output to control buzzering
}

void loop()
{
  // Duration will be the input pulse width and distance will be the distance to the obstacle in centimeters
  int duration, distance;
  // Output pulse with 1ms width on trigPin
  digitalWrite(trigPin, HIGH); 
  delay(1);
  digitalWrite(trigPin, LOW);
  // Measure the pulse input in echo pin
  duration = pulseIn(echoPin, HIGH);
  // Distance is half the duration devided by 29.1 (from datasheet)
  distance = (duration/2) / 29.1;
  Serial.println(distance);
  // if distance less than 0.5 meter and more than 0 (0 or less means over range) 
    if (distance <= 50 && distance >= 0) {
      // iterate over the notes of the melody:
      for (int thisNote = 0; thisNote < 10; thisNote++) {

    // to calculate the note duration, take one second divided by the note type.
    //e.g. quarter note = 2000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 2000 / noteDurations[thisNote];
    tone(8, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    }} else {
     noTone(8);
    }
    // Waiting 60 ms won't hurt any one
    delay(60);
}
